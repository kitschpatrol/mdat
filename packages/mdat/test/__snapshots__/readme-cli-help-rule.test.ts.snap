// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`cli help invocation > should correctly identify executables 1`] = `
"\`\`\`txt
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
\`\`\`"
`;

exports[`cli help invocation > should correctly resolve binary names that are in package.json but not on the path 1`] = `
"#### Command: \`mdat\`

Work with \`mdat\` placeholder comments in any Markdown file.

This section lists top-level commands for \`mdat\`.

If no command is provided, \`mdat expand\` is run by default.

Usage:

\`\`\`txt
mdat [command]
\`\`\`

| Command | Argument | Description |
| --- | --- | --- |
| \`expand\` | \`<files..>\` \`[options]\` | Expand \`mdat\` placeholder comments. _(Default command.)_ |
| \`check\` | \`<files..>\` \`[options]\` | Validate a markdown file with \`mdat\` placeholder comments. |
| \`collapse\` | \`<files..>\` \`[options]\` | Collapse \`mdat\` placeholder comments. |
| \`readme\` | \`[command]\` | Work with \`mdat\` comments in your readme.md. |


_See the sections below for more information on each subcommand._

#### Subcommand: \`mdat expand\`

Expand \`mdat\` placeholder comments.

Usage:

\`\`\`txt
mdat expand <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to collapse. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat check\`

Validate a markdown file with \`mdat\` placeholder comments.

Usage:

\`\`\`txt
mdat check <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to collapse. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat collapse\`

Collapse \`mdat\` placeholder comments.

Usage:

\`\`\`txt
mdat collapse <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to collapse. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme\`

Work with \`mdat\` comments in your readme.md.

This section lists top-level commands for \`mdat readme\`.

If no command is provided, \`mdat readme expand\` is run by default.

Usage:

\`\`\`txt
mdat readme [command]
\`\`\`

| Command | Argument | Description |
| --- | --- | --- |
| \`readme expand\` | \`[files..]\` \`[options]\` | Expand \`mdat\` comment placeholders in your readme.md using a collection of helpful built-in expansion rules. _(Default command.)_ |
| \`readme check\` | \`[files..]\` \`[options]\` | Validate \`mdat\` placeholder comments in your readme.md. |
| \`readme collapse\` | \`[files..]\` \`[options]\` | Collapse \`mdat\` placeholder comments in your readme.md. |
| \`readme init\` | \`[options]\` | Interactively create a new readme.md file with sensible default \`mdat\` comment placeholders. |


_See the sections below for more information on each subcommand._

#### Subcommand: \`mdat readme expand\`

Expand \`mdat\` comment placeholders in your readme.md using a collection of helpful built-in expansion rules.

Usage:

\`\`\`txt
mdat readme expand [files..] [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Readme file(s) with \`mdat\` placeholder comments to collapse. If not provided, the closest readme.md file is used. _(Optional.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--package\` |  | Path to the package.json file to use to populate the readme. | \`string\` | The closest package.json file is used by default. |
| \`--assets\` |  | Path to find and save readme-related assets. | \`string\` | \`./assets\` |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme check\`

Validate \`mdat\` placeholder comments in your readme.md.

Usage:

\`\`\`txt
mdat readme check [files..] [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Readme file(s) with \`mdat\` placeholder comments to collapse. If not provided, the closest readme.md file is used. _(Optional.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--package\` |  | Path to the package.json file to use to populate the readme. | \`string\` | The closest package.json file is used by default. |
| \`--assets\` |  | Path to find and save readme-related assets. | \`string\` | \`./assets\` |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme collapse\`

Collapse \`mdat\` placeholder comments in your readme.md.

Usage:

\`\`\`txt
mdat readme collapse [files..] [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Readme file(s) with \`mdat\` placeholder comments to collapse. If not provided, the closest readme.md file is used. _(Optional.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme init\`

Interactively create a new readme.md file with sensible default \`mdat\` comment placeholders.

Usage:

\`\`\`txt
mdat readme init [options]
\`\`\`

| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--interactive\` | \`-i\` | Run the guided interactive \`init\` process. Set explicitly to \`false\` to use default values and skip the prompt. | \`boolean\` | \`true\` |
| \`--overwrite\` |  | Replace an existing readme file if one is found. | \`boolean\` | \`false\`, if an existing readme is found, don't touch it. |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--expand\` | \`-e\` | Automatically run \`mdat readme\` immediately after creating the readme template. | \`boolean\` | \`true\` |
| \`--template\` | \`-t\` | Specify a template to use for the new readme. | \`string\` | "Mdat Readme" |
| \`--compound\` | \`-c\` | Use compound comment version of the template to replace several individual comment placeholders where possible. This combines things like \`<!-- title -->\`, \`<!-- badges -->\`, etc. in a single \`<!-- header -->\` comment. It's less clutter when you're editing, but it's also less explicit. The final readme.md output is identical. | \`boolean\` | \`true\` |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |
"
`;

exports[`cli help invocation > should fall back to a basic code block if the help output cannot be parsed 1`] = `
"\`\`\`txt
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
\`\`\`"
`;

exports[`cli help invocation > should get help markdown directly from the output of a command 1`] = `
"#### Command: \`mdat\`

Work with \`mdat\` placeholder comments in any Markdown file.

This section lists top-level commands for \`mdat\`.

If no command is provided, \`mdat expand\` is run by default.

Usage:

\`\`\`txt
mdat [command]
\`\`\`

| Command | Argument | Description |
| --- | --- | --- |
| \`expand\` | \`<files..>\` \`[options]\` | Expand \`mdat\` placeholder comments. _(Default command.)_ |
| \`check\` | \`<files..>\` \`[options]\` | Validate a markdown file with \`mdat\` placeholder comments. |
| \`collapse\` | \`<files..>\` \`[options]\` | Collapse \`mdat\` placeholder comments. |
| \`readme\` | \`[command]\` | Work with \`mdat\` comments in your readme.md. |


_See the sections below for more information on each subcommand._

#### Subcommand: \`mdat expand\`

Expand \`mdat\` placeholder comments.

Usage:

\`\`\`txt
mdat expand <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to collapse. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat check\`

Validate a markdown file with \`mdat\` placeholder comments.

Usage:

\`\`\`txt
mdat check <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to collapse. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat collapse\`

Collapse \`mdat\` placeholder comments.

Usage:

\`\`\`txt
mdat collapse <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to collapse. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme\`

Work with \`mdat\` comments in your readme.md.

This section lists top-level commands for \`mdat readme\`.

If no command is provided, \`mdat readme expand\` is run by default.

Usage:

\`\`\`txt
mdat readme [command]
\`\`\`

| Command | Argument | Description |
| --- | --- | --- |
| \`readme expand\` | \`[files..]\` \`[options]\` | Expand \`mdat\` comment placeholders in your readme.md using a collection of helpful built-in expansion rules. _(Default command.)_ |
| \`readme check\` | \`[files..]\` \`[options]\` | Validate \`mdat\` placeholder comments in your readme.md. |
| \`readme collapse\` | \`[files..]\` \`[options]\` | Collapse \`mdat\` placeholder comments in your readme.md. |
| \`readme init\` | \`[options]\` | Interactively create a new readme.md file with sensible default \`mdat\` comment placeholders. |


_See the sections below for more information on each subcommand._

#### Subcommand: \`mdat readme expand\`

Expand \`mdat\` comment placeholders in your readme.md using a collection of helpful built-in expansion rules.

Usage:

\`\`\`txt
mdat readme expand [files..] [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Readme file(s) with \`mdat\` placeholder comments to collapse. If not provided, the closest readme.md file is used. _(Optional.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--package\` |  | Path to the package.json file to use to populate the readme. | \`string\` | The closest package.json file is used by default. |
| \`--assets\` |  | Path to find and save readme-related assets. | \`string\` | \`./assets\` |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme check\`

Validate \`mdat\` placeholder comments in your readme.md.

Usage:

\`\`\`txt
mdat readme check [files..] [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Readme file(s) with \`mdat\` placeholder comments to collapse. If not provided, the closest readme.md file is used. _(Optional.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--package\` |  | Path to the package.json file to use to populate the readme. | \`string\` | The closest package.json file is used by default. |
| \`--assets\` |  | Path to find and save readme-related assets. | \`string\` | \`./assets\` |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme collapse\`

Collapse \`mdat\` placeholder comments in your readme.md.

Usage:

\`\`\`txt
mdat readme collapse [files..] [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Readme file(s) with \`mdat\` placeholder comments to collapse. If not provided, the closest readme.md file is used. _(Optional.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme init\`

Interactively create a new readme.md file with sensible default \`mdat\` comment placeholders.

Usage:

\`\`\`txt
mdat readme init [options]
\`\`\`

| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--interactive\` | \`-i\` | Run the guided interactive \`init\` process. Set explicitly to \`false\` to use default values and skip the prompt. | \`boolean\` | \`true\` |
| \`--overwrite\` |  | Replace an existing readme file if one is found. | \`boolean\` | \`false\`, if an existing readme is found, don't touch it. |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--expand\` | \`-e\` | Automatically run \`mdat readme\` immediately after creating the readme template. | \`boolean\` | \`true\` |
| \`--template\` | \`-t\` | Specify a template to use for the new readme. | \`string\` | "Mdat Readme" |
| \`--compound\` | \`-c\` | Use compound comment version of the template to replace several individual comment placeholders where possible. This combines things like \`<!-- title -->\`, \`<!-- badges -->\`, etc. in a single \`<!-- header -->\` comment. It's less clutter when you're editing, but it's also less explicit. The final readme.md output is identical. | \`boolean\` | \`true\` |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |
"
`;

exports[`cli help invocation > should try to infer the binary to get help from based on package.json 1`] = `
"#### Command: \`mdat\`

Work with \`mdat\` placeholder comments in any Markdown file.

This section lists top-level commands for \`mdat\`.

If no command is provided, \`mdat expand\` is run by default.

Usage:

\`\`\`txt
mdat [command]
\`\`\`

| Command | Argument | Description |
| --- | --- | --- |
| \`expand\` | \`<files..>\` \`[options]\` | Expand \`mdat\` placeholder comments. _(Default command.)_ |
| \`check\` | \`<files..>\` \`[options]\` | Validate a markdown file with \`mdat\` placeholder comments. |
| \`collapse\` | \`<files..>\` \`[options]\` | Collapse \`mdat\` placeholder comments. |
| \`readme\` | \`[command]\` | Work with \`mdat\` comments in your readme.md. |


_See the sections below for more information on each subcommand._

#### Subcommand: \`mdat expand\`

Expand \`mdat\` placeholder comments.

Usage:

\`\`\`txt
mdat expand <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to collapse. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat check\`

Validate a markdown file with \`mdat\` placeholder comments.

Usage:

\`\`\`txt
mdat check <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to collapse. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat collapse\`

Collapse \`mdat\` placeholder comments.

Usage:

\`\`\`txt
mdat collapse <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to collapse. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme\`

Work with \`mdat\` comments in your readme.md.

This section lists top-level commands for \`mdat readme\`.

If no command is provided, \`mdat readme expand\` is run by default.

Usage:

\`\`\`txt
mdat readme [command]
\`\`\`

| Command | Argument | Description |
| --- | --- | --- |
| \`readme expand\` | \`[files..]\` \`[options]\` | Expand \`mdat\` comment placeholders in your readme.md using a collection of helpful built-in expansion rules. _(Default command.)_ |
| \`readme check\` | \`[files..]\` \`[options]\` | Validate \`mdat\` placeholder comments in your readme.md. |
| \`readme collapse\` | \`[files..]\` \`[options]\` | Collapse \`mdat\` placeholder comments in your readme.md. |
| \`readme init\` | \`[options]\` | Interactively create a new readme.md file with sensible default \`mdat\` comment placeholders. |


_See the sections below for more information on each subcommand._

#### Subcommand: \`mdat readme expand\`

Expand \`mdat\` comment placeholders in your readme.md using a collection of helpful built-in expansion rules.

Usage:

\`\`\`txt
mdat readme expand [files..] [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Readme file(s) with \`mdat\` placeholder comments to collapse. If not provided, the closest readme.md file is used. _(Optional.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--package\` |  | Path to the package.json file to use to populate the readme. | \`string\` | The closest package.json file is used by default. |
| \`--assets\` |  | Path to find and save readme-related assets. | \`string\` | \`./assets\` |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme check\`

Validate \`mdat\` placeholder comments in your readme.md.

Usage:

\`\`\`txt
mdat readme check [files..] [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Readme file(s) with \`mdat\` placeholder comments to collapse. If not provided, the closest readme.md file is used. _(Optional.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing \`mdat\` comment expansion rules. | \`array\` |  |
| \`--package\` |  | Path to the package.json file to use to populate the readme. | \`string\` | The closest package.json file is used by default. |
| \`--assets\` |  | Path to find and save readme-related assets. | \`string\` | \`./assets\` |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme collapse\`

Collapse \`mdat\` placeholder comments in your readme.md.

Usage:

\`\`\`txt
mdat readme collapse [files..] [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Readme file(s) with \`mdat\` placeholder comments to collapse. If not provided, the closest readme.md file is used. _(Optional.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--print\` |  | Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` |  |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |


#### Subcommand: \`mdat readme init\`

Interactively create a new readme.md file with sensible default \`mdat\` comment placeholders.

Usage:

\`\`\`txt
mdat readme init [options]
\`\`\`

| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--interactive\` | \`-i\` | Run the guided interactive \`init\` process. Set explicitly to \`false\` to use default values and skip the prompt. | \`boolean\` | \`true\` |
| \`--overwrite\` |  | Replace an existing readme file if one is found. | \`boolean\` | \`false\`, if an existing readme is found, don't touch it. |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--expand\` | \`-e\` | Automatically run \`mdat readme\` immediately after creating the readme template. | \`boolean\` | \`true\` |
| \`--template\` | \`-t\` | Specify a template to use for the new readme. | \`string\` | "Mdat Readme" |
| \`--compound\` | \`-c\` | Use compound comment version of the template to replace several individual comment placeholders where possible. This combines things like \`<!-- title -->\`, \`<!-- badges -->\`, etc. in a single \`<!-- header -->\` comment. It's less clutter when you're editing, but it's also less explicit. The final readme.md output is identical. | \`boolean\` | \`true\` |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |
"
`;

exports[`cli help object to markdown > should convert a help object or "mdat --help" to valid markdown 1`] = `
"#### Command: \`mdat\`

Note: \`expand\` is the default and only command at the moment.

This section lists top-level commands for \`mdat\`.

If no command is provided, \`mdat expand\` is run by default.

Usage:

\`\`\`txt
mdat [command] [options]
\`\`\`

| Command | Argument | Description |
| --- | --- | --- |
| \`expand\` | \`<files..>\` \`[options]\` | description goes here _(Default command.)_ |


_See the sections below for more information on each subcommand._"
`;

exports[`cli help object to markdown > should convert a help object or "mdat expand --help" to valid markdown 1`] = `
"#### Subcommand: \`mdat expand\`

description goes here

Usage:

\`\`\`txt
mdat expand <files..> [options]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files\` | Markdown file(s) with \`mdat\` placeholder comments to expand. _(Required.)_ | \`string\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--config\` |  | Path(s) to files containing mdat configs. | \`array\` | Configuration is loaded if found from the usual places, or defaults are used. |
| \`--rules\` | \`-r\` | Path(s) to files containing mdat comment expansion rules. | \`array\` |  |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--name\` | \`-n\` | Output file name. | \`string\` | Same name as input file. Overwrites the input file. |
| \`--print\` |  | Print the expanded markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options. | \`boolean\` | \`false\` |
| \`--prefix\` |  | Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-mdat comments in your markdown file, or if you're willing to trade some verbosity for safety. | \`string\` |  |
| \`--meta\` | \`-m\` | Embed an extra comment at the top of the generated markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically. | \`boolean\` | \`false\` |
| \`--check\` | \`-c\` | Check the input files for rule violations without expanding them. Identifies things like missing comment placeholders and incorrect placeholder ordering. | \`boolean\` | \`false\` |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to \`stderr\` for ease of redirection. | \`boolean\` | \`false\` |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |
"
`;

exports[`cli help object to markdown > should convert a help object or "mdat readme --help" to valid markdown 1`] = `
"#### Subcommand: \`mdat readme\`

Work with \`mdat\` comments in your readme.md.

This section lists top-level commands for \`mdat readme\`.

If no command is provided, \`mdat readme expand\` is run by default.

Usage:

\`\`\`txt
mdat readme [command] [options]
\`\`\`

| Command | Argument | Description |
| --- | --- | --- |
| \`readme expand\` | \`[options]\` | Expand \`mdat\` comment placeholders in your readme.md using a collection of helpful built-in expansion rules. _(Default command.)_ |
| \`readme check\` | \`[options]\` | Validate \`mdat\` placeholder comments in your readme.md. |
| \`readme clean\` | \`[options]\` | Collapse \`mdat\` placeholder comments in your readme.md. |
| \`readme init\` | \`[options]\` | Interactively create a new readme.md file with sensible \`mdat\` comment placeholders. |


_See the sections below for more information on each subcommand._"
`;

exports[`cli help object to markdown > should convert a help object or "mdat readme init --help" to valid markdown 1`] = `
"#### Subcommand: \`mdat readme init\`

Interactively create a new readme.md file with sensible \`mdat\` comment placeholders.

Usage:

\`\`\`txt
mdat readme init [options]
\`\`\`

| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--interactive\` | \`-i\` | Run the guided interactive \`init\` process. Set explicitly to \`false\` to use default values and skip the prompt. | \`boolean\` | \`true\` |
| \`--overwrite\` |  | Replace an existing readme file if one is found. | \`boolean\` | \`false\`, if an existing readme is found, don't touch it. |
| \`--output\` | \`-o\` | Output file directory. | \`string\` | Same directory as input file. |
| \`--expand\` | \`-e\` | Automatically run \`mdat readme\` immediately after creating the readme template. | \`boolean\` | \`true\` |
| \`--template\` | \`-t\` | Specify a template to use for the new readme. | \`string\` | "Mdat Readme" |
| \`--compound\` | \`-c\` | Use compound comment version of the template to replace several individual comment placeholders where possible. This combines things like \`<!-- title -->\`, \`<!-- badges -->\`, etc. in a single \`<!-- header -->\` comment. It's less clutter when you're editing, but it's also less explicit. The final readme.md output is identical. | \`boolean\` | \`true\` |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection. | \`boolean\` |  |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |
"
`;

exports[`cli help object to markdown > should convert a help object or "shared-config --help" to valid markdown 1`] = `
"#### Command: \`shared-config\`

Linting and formatting for web projects.

Usage:

\`\`\`txt
shared-config [<file|glob> ...]
\`\`\`

| Option | Alias | Argument | Description |
| --- | --- | --- | --- |
| \`--check\` | \`-c\` |  | Check for and report issues. Same as shared-config. |
| \`--init\` | \`-i\` |  | Initialize by copying starter config files to your project root. |
| \`--print-config\` | \`-p\` | \`<path>\` | Print the effective configuration at a certain path. |
| \`--fix\` | \`-f\` |  | Fix all auto-fixable issues, and report the un-fixable. |
| \`--help\` | \`-h\` |  | Print this help info. |
| \`--version\` | \`-v\` |  | Print the package version. |
"
`;

exports[`cli help object to markdown > should convert a help object or "tldraw-cli --help" to valid markdown 1`] = `
"#### Command: \`tldraw-cli\`

CLI tools for tldraw.

This section lists top-level commands for \`tldraw-cli\`.

Usage:

\`\`\`txt
tldraw-cli <command>
\`\`\`

| Command | Argument | Description |
| --- | --- | --- |
| \`export\` | \`<files-or-urls..>\` | Export a local tldraw ".tldr" file or a tldraw.com URL to an svg, png, json, or tldr file. Prints the absolute path(s) to the exported image(s) to stdout. |
| \`open\` | \`[files-or-urls..]\` | Open a tldraw \`.tldr\` file or tldraw.com URL your default browser. Uses a locally-hosted instance of tldraw. Call \`open\` without an argument to open a blank sketch. Sketches opened via URL are temporarily copied to the local system, and will not be kept in sync with tldraw.com. This process does not exit until the browser is closed. |


| Option | Alias | Description | Type |
| --- | --- | --- | --- |
| \`--help\` | \`-h\` | Show help | \`boolean\` |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |


_See the sections below for more information on each subcommand._"
`;

exports[`cli help object to markdown > should convert a help object or "tldraw-cli export --help" to valid markdown 1`] = `
"#### Subcommand: \`tldraw-cli export\`

Export a local tldraw ".tldr" file or a tldraw.com URL to an svg, png, json, or tldr file. Prints the absolute path(s) to the exported image(s) to stdout.

Usage:

\`\`\`txt
tldraw-cli export <files-or-urls..>
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files-or-urls\` | The tldraw sketch to export. May be one or more paths to local \`.tldr\` files, or tldraw.com sketch URLs. Accepts a mix of both file paths and URLs, and supports glob matching via your shell. Prints the absolute path(s) to the exported image(s) to \`stdout\`. _(Required.)_ | \`array\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--format\` | \`-f\` | Output image format. | \`string\` | \`"svg"\` |
| \`--output\` | \`-o\` | Output image directory. | \`string\` | \`"./"\` |
| \`--name\` | \`-n\` | Output image name (without extension). | \`string\` | The original file name or URL id is used. |
| \`--frames\` |  | Export each sketch "frame" as a separate image. Pass one or more frame names or IDs to export specific frames, or skip the arguments to export all frames. | \`array\` | \`false\` |
| \`--transparent\` | \`-t\` | Export an image with a transparent background. | \`boolean\` | \`false\` |
| \`--dark\` | \`-d\` | Export a dark theme version of the image. | \`boolean\` | \`false\` |
| \`--strip-style\` |  | Remove \`<style>\` elements from SVG output, useful to lighten the load of embedded fonts if you intend to provide your own stylesheets. Applies to SVG output only. | \`boolean\` | \`false\` |
| \`--print\` | \`-p\` | Print the exported image(s) to stdout instead of saving to a file. Incompatible with \`--output\`, and disregards \`--name\`. PNGs are printed as base64-encoded strings. | \`boolean\` | \`false\` |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to \`stderr\` for ease of redirection. | \`boolean\` | \`false\` |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |
"
`;

exports[`cli help object to markdown > should convert a help object or "tldraw-cli open --help" to valid markdown 1`] = `
"#### Subcommand: \`tldraw-cli open\`

Open a tldraw \`.tldr\` file or tldraw.com URL your default browser. Uses a locally-hosted instance of tldraw. Call \`open\` without an argument to open a blank sketch. Sketches opened via URL are temporarily copied to the local system, and will not be kept in sync with tldraw.com. This process does not exit until the browser is closed.

Usage:

\`\`\`txt
tldraw-cli open [files-or-urls..]
\`\`\`

| Positional Argument | Description | Type |
| --- | --- | --- |
| \`files-or-urls\` | The \`.tldr\` file(s) or tldraw.com sketch URL(s) to open. Omit the argument to open a blank sketch. Supports glob matching via your shell. Prints the URL of the local server to \`stdout\`. _(Optional.)_ | \`array\` |


| Option | Alias | Description | Type | Default |
| --- | --- | --- | --- | --- |
| \`--local\` | \`-l\` | Open the file or URL in a local instance of tldraw, instead of tldraw.com. | \`boolean\` | \`false\` |
| \`--verbose\` |  | Enable verbose logging. All verbose logs and prefixed with their log level and are printed to \`stderr\` for ease of redirection. | \`boolean\` | \`false\` |
| \`--help\` | \`-h\` | Show help | \`boolean\` |  |
| \`--version\` | \`-v\` | Show version number | \`boolean\` |  |
"
`;

exports[`cli help string to object > should convert "mdat --help" to a valid program info object 1`] = `
{
  "arguments": [
    "<files..>",
    "[options]",
  ],
  "commandName": "mdat",
  "commands": [
    {
      "aliases": undefined,
      "arguments": [
        "[command]",
        "[options]",
      ],
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Note: \`expand\` is the default and only command at the moment.",
      "flags": undefined,
      "parentCommandName": "mdat",
      "required": undefined,
      "type": undefined,
    },
    {
      "aliases": undefined,
      "arguments": [
        "<files..>",
        "[options]",
      ],
      "choices": undefined,
      "commandName": "expand",
      "default": true,
      "defaultValue": undefined,
      "description": "description goes here",
      "flags": undefined,
      "parentCommandName": "mdat",
      "required": undefined,
      "type": undefined,
    },
  ],
  "description": "description goes here",
  "options": [
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Configuration is loaded if found from the usual places, or defaults are used.",
      "description": "Path(s) to files containing mdat configs.",
      "flags": [
        "--config",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "array",
    },
    {
      "aliases": [
        "-r",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Path(s) to files containing mdat comment expansion rules.",
      "flags": [
        "--rules",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "array",
    },
    {
      "aliases": [
        "-o",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Same directory as input file.",
      "description": "Output file directory.",
      "flags": [
        "--output",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-n",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Same name as input file. Overwrites the input file.",
      "description": "Output file name.",
      "flags": [
        "--name",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Print the expanded markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options.",
      "flags": [
        "--print",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-mdat comments in your markdown file, or if you're willing to trade some verbosity for safety.",
      "flags": [
        "--prefix",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-m",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Embed an extra comment at the top of the generated markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically.",
      "flags": [
        "--meta",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-c",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Check the input files for rule violations without expanding them. Identifies things like missing comment placeholders and incorrect placeholder ordering.",
      "flags": [
        "--check",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Enable verbose logging. All verbose logs and prefixed with their log level and are printed to \`stderr\` for ease of redirection.",
      "flags": [
        "--verbose",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-h",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show help",
      "flags": [
        "--help",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-v",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show version number",
      "flags": [
        "--version",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
  ],
  "positionals": [
    {
      "aliases": undefined,
      "arguments": [
        "files",
      ],
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Markdown file(s) with \`mdat\` placeholder comments to expand.",
      "flags": undefined,
      "required": undefined,
      "type": "string",
    },
  ],
  "subcommandName": undefined,
}
`;

exports[`cli help string to object > should convert "mdat expand --help" to a valid program info object 1`] = `
{
  "arguments": [
    "<files..>",
    "[options]",
  ],
  "commandName": "mdat",
  "commands": undefined,
  "description": "description goes here",
  "options": [
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Configuration is loaded if found from the usual places, or defaults are used.",
      "description": "Path(s) to files containing mdat configs.",
      "flags": [
        "--config",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "array",
    },
    {
      "aliases": [
        "-r",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Path(s) to files containing mdat comment expansion rules.",
      "flags": [
        "--rules",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "array",
    },
    {
      "aliases": [
        "-o",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Same directory as input file.",
      "description": "Output file directory.",
      "flags": [
        "--output",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-n",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Same name as input file. Overwrites the input file.",
      "description": "Output file name.",
      "flags": [
        "--name",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Print the expanded markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options.",
      "flags": [
        "--print",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-mdat comments in your markdown file, or if you're willing to trade some verbosity for safety.",
      "flags": [
        "--prefix",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-m",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Embed an extra comment at the top of the generated markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically.",
      "flags": [
        "--meta",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-c",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Check the input files for rule violations without expanding them. Identifies things like missing comment placeholders and incorrect placeholder ordering.",
      "flags": [
        "--check",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Enable verbose logging. All verbose logs and prefixed with their log level and are printed to \`stderr\` for ease of redirection.",
      "flags": [
        "--verbose",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-h",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show help",
      "flags": [
        "--help",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-v",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show version number",
      "flags": [
        "--version",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
  ],
  "positionals": [
    {
      "aliases": undefined,
      "arguments": [
        "files",
      ],
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Markdown file(s) with \`mdat\` placeholder comments to expand.",
      "flags": undefined,
      "required": true,
      "type": "string",
    },
  ],
  "subcommandName": "expand",
}
`;

exports[`cli help string to object > should convert "mdat readme --help" to a valid program info object 1`] = `
{
  "arguments": [
    "[command]",
    "[options]",
  ],
  "commandName": "mdat",
  "commands": [
    {
      "aliases": undefined,
      "arguments": [
        "[options]",
      ],
      "choices": undefined,
      "commandName": "readme expand",
      "default": true,
      "defaultValue": undefined,
      "description": "Expand \`mdat\` comment placeholders in your readme.md using a collection of helpful built-in expansion rules.",
      "flags": undefined,
      "parentCommandName": "mdat",
      "required": undefined,
      "type": undefined,
    },
    {
      "aliases": undefined,
      "arguments": [
        "[options]",
      ],
      "choices": undefined,
      "commandName": "readme check",
      "default": undefined,
      "defaultValue": undefined,
      "description": "Validate \`mdat\` placeholder comments in your readme.md.",
      "flags": undefined,
      "parentCommandName": "mdat",
      "required": undefined,
      "type": undefined,
    },
    {
      "aliases": undefined,
      "arguments": [
        "[options]",
      ],
      "choices": undefined,
      "commandName": "readme clean",
      "default": undefined,
      "defaultValue": undefined,
      "description": "Collapse \`mdat\` placeholder comments in your readme.md.",
      "flags": undefined,
      "parentCommandName": "mdat",
      "required": undefined,
      "type": undefined,
    },
    {
      "aliases": undefined,
      "arguments": [
        "[options]",
      ],
      "choices": undefined,
      "commandName": "readme init",
      "default": undefined,
      "defaultValue": undefined,
      "description": "Interactively create a new readme.md file with sensible \`mdat\` comment placeholders.",
      "flags": undefined,
      "parentCommandName": "mdat",
      "required": undefined,
      "type": undefined,
    },
  ],
  "description": "Work with \`mdat\` comments in your readme.md.",
  "options": [
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Configuration is loaded if found from the usual places, or defaults are used.",
      "description": "Path(s) to files containing mdat configs.",
      "flags": [
        "--config",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "array",
    },
    {
      "aliases": [
        "-r",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Path(s) to files containing \`mdat\` comment expansion rules.",
      "flags": [
        "--rules",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "array",
    },
    {
      "aliases": [
        "-o",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Same directory as input file.",
      "description": "Output file directory.",
      "flags": [
        "--output",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-n",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Same name as input file. Overwrites the input file.",
      "description": "Output file name.",
      "flags": [
        "--name",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "The closest readme.md file is used by default.",
      "description": "Path to the readme.md file to expand.",
      "flags": [
        "--readme",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "The closest package.json file is used by default.",
      "description": "Path to the package.json file to use to populate the readme.",
      "flags": [
        "--package",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "./assets",
      "description": "Path to find and save readme-related assets.",
      "flags": [
        "--assets",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Require a string prefix before all comments to be considered for expansion. Useful if you have a bunch of non-\`mdat\` comments in your Markdown file, or if you're willing to trade some verbosity for safety.",
      "flags": [
        "--prefix",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-m",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Embed an extra comment at the top of the generated Markdown noting the date of generation and warning editors that certain sections of the document have been generated dynamically.",
      "flags": [
        "--meta",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Print the expanded Markdown to stdout instead of saving to a file. Ignores \`--output\` and \`--name\` options.",
      "flags": [
        "--print",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection.",
      "flags": [
        "--verbose",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-h",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show help",
      "flags": [
        "--help",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-v",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show version number",
      "flags": [
        "--version",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
  ],
  "positionals": undefined,
  "subcommandName": "readme",
}
`;

exports[`cli help string to object > should convert "mdat readme init --help" to a valid program info object 1`] = `
{
  "arguments": [
    "[options]",
  ],
  "commandName": "mdat readme",
  "commands": undefined,
  "description": "Interactively create a new readme.md file with sensible \`mdat\` comment placeholders.",
  "options": [
    {
      "aliases": [
        "-i",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "true",
      "description": "Run the guided interactive \`init\` process. Set explicitly to \`false\` to use default values and skip the prompt.",
      "flags": [
        "--interactive",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "\`false\`, if an existing readme is found, don't touch it.",
      "description": "Replace an existing readme file if one is found.",
      "flags": [
        "--overwrite",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-o",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "Same directory as input file.",
      "description": "Output file directory.",
      "flags": [
        "--output",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-e",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "true",
      "description": "Automatically run \`mdat readme\` immediately after creating the readme template.",
      "flags": [
        "--expand",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-t",
      ],
      "arguments": undefined,
      "choices": [
        ""Mdat Readme"",
        ""Standard Readme Basic"",
        ""Standard Readme Full"",
      ],
      "commandName": undefined,
      "default": undefined,
      "defaultValue": ""Mdat Readme"",
      "description": "Specify a template to use for the new readme.",
      "flags": [
        "--template",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-c",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "true",
      "description": "Use compound comment version of the template to replace several individual comment placeholders where possible. This combines things like \`<!-- title -->\`, \`<!-- badges -->\`, etc. in a single \`<!-- header -->\` comment. It's less clutter when you're editing, but it's also less explicit. The final readme.md output is identical.",
      "flags": [
        "--compound",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Enable verbose logging. All verbose logs and prefixed with their log level and are printed to stderr for ease of redirection.",
      "flags": [
        "--verbose",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-h",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show help",
      "flags": [
        "--help",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-v",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show version number",
      "flags": [
        "--version",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
  ],
  "positionals": undefined,
  "subcommandName": "init",
}
`;

exports[`cli help string to object > should convert "shared-config --help" to a valid program info object 1`] = `
{
  "arguments": [
    "[<file|glob> ...]",
  ],
  "commandName": "shared-config",
  "description": "Linting and formatting for web projects.",
  "options": [
    {
      "aliases": [
        "-c",
      ],
      "arguments": undefined,
      "description": "Check for and report issues. Same as shared-config.",
      "flags": [
        "--check",
      ],
    },
    {
      "aliases": [
        "-i",
      ],
      "arguments": undefined,
      "description": "Initialize by copying starter config files to your project root.",
      "flags": [
        "--init",
      ],
    },
    {
      "aliases": [
        "-p",
      ],
      "arguments": [
        "<path>",
      ],
      "description": "Print the effective configuration at a certain path.",
      "flags": [
        "--print-config",
      ],
    },
    {
      "aliases": [
        "-f",
      ],
      "arguments": undefined,
      "description": "Fix all auto-fixable issues, and report the un-fixable.",
      "flags": [
        "--fix",
      ],
    },
    {
      "aliases": [
        "-h",
      ],
      "arguments": undefined,
      "description": "Print this help info.",
      "flags": [
        "--help",
      ],
    },
    {
      "aliases": [
        "-v",
      ],
      "arguments": undefined,
      "description": "Print the package version.",
      "flags": [
        "--version",
      ],
    },
  ],
  "subcommandName": undefined,
}
`;

exports[`cli help string to object > should convert "tldraw-cli --help" to a valid program info object 1`] = `
{
  "arguments": [
    "<command>",
  ],
  "commandName": "tldraw-cli",
  "commands": [
    {
      "aliases": undefined,
      "arguments": [
        "<command>",
      ],
      "choices": undefined,
      "commandName": undefined,
      "default": true,
      "defaultValue": undefined,
      "description": "CLI tools for tldraw.",
      "flags": undefined,
      "parentCommandName": "tldraw-cli",
      "required": undefined,
      "type": undefined,
    },
    {
      "aliases": undefined,
      "arguments": [
        "<files-or-urls..>",
      ],
      "choices": undefined,
      "commandName": "export",
      "default": undefined,
      "defaultValue": undefined,
      "description": "Export a local tldraw ".tldr" file or a tldraw.com URL to an svg, png, json, or tldr file. Prints the absolute path(s) to the exported image(s) to stdout.",
      "flags": undefined,
      "parentCommandName": "tldraw-cli",
      "required": undefined,
      "type": undefined,
    },
    {
      "aliases": undefined,
      "arguments": [
        "[files-or-urls..]",
      ],
      "choices": undefined,
      "commandName": "open",
      "default": undefined,
      "defaultValue": undefined,
      "description": "Open a tldraw \`.tldr\` file or tldraw.com URL your default browser. Uses a locally-hosted instance of tldraw. Call \`open\` without an argument to open a blank sketch. Sketches opened via URL are temporarily copied to the local system, and will not be kept in sync with tldraw.com. This process does not exit until the browser is closed.",
      "flags": undefined,
      "parentCommandName": "tldraw-cli",
      "required": undefined,
      "type": undefined,
    },
  ],
  "description": "CLI tools for tldraw.",
  "options": [
    {
      "aliases": [
        "-h",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show help",
      "flags": [
        "--help",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-v",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show version number",
      "flags": [
        "--version",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
  ],
  "positionals": undefined,
  "subcommandName": undefined,
}
`;

exports[`cli help string to object > should convert "tldraw-cli export --help" to a valid program info object 1`] = `
{
  "arguments": [
    "<files-or-urls..>",
  ],
  "commandName": "tldraw-cli",
  "commands": undefined,
  "description": "Export a local tldraw ".tldr" file or a tldraw.com URL to an svg, png, json, or tldr file. Prints the absolute path(s) to the exported image(s) to stdout.",
  "options": [
    {
      "aliases": [
        "-f",
      ],
      "arguments": undefined,
      "choices": [
        ""png"",
        ""svg"",
        ""json"",
        ""tldr"",
      ],
      "commandName": undefined,
      "default": undefined,
      "defaultValue": ""svg"",
      "description": "Output image format.",
      "flags": [
        "--format",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-o",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": ""./"",
      "description": "Output image directory.",
      "flags": [
        "--output",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": [
        "-n",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "The original file name or URL id is used.",
      "description": "Output image name (without extension).",
      "flags": [
        "--name",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "string",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Export each sketch "frame" as a separate image. Pass one or more frame names or IDs to export specific frames, or skip the arguments to export all frames.",
      "flags": [
        "--frames",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "array",
    },
    {
      "aliases": [
        "-t",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Export an image with a transparent background.",
      "flags": [
        "--transparent",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-d",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Export a dark theme version of the image.",
      "flags": [
        "--dark",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Remove \`<style>\` elements from SVG output, useful to lighten the load of embedded fonts if you intend to provide your own stylesheets. Applies to SVG output only.",
      "flags": [
        "--strip-style",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-p",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Print the exported image(s) to stdout instead of saving to a file. Incompatible with \`--output\`, and disregards \`--name\`. PNGs are printed as base64-encoded strings.",
      "flags": [
        "--print",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Enable verbose logging. All verbose logs and prefixed with their log level and are printed to \`stderr\` for ease of redirection.",
      "flags": [
        "--verbose",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-h",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show help",
      "flags": [
        "--help",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-v",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show version number",
      "flags": [
        "--version",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
  ],
  "positionals": [
    {
      "aliases": undefined,
      "arguments": [
        "files-or-urls",
      ],
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "The tldraw sketch to export. May be one or more paths to local \`.tldr\` files, or tldraw.com sketch URLs. Accepts a mix of both file paths and URLs, and supports glob matching via your shell. Prints the absolute path(s) to the exported image(s) to \`stdout\`.",
      "flags": undefined,
      "required": true,
      "type": "array",
    },
  ],
  "subcommandName": "export",
}
`;

exports[`cli help string to object > should convert "tldraw-cli open --help" to a valid program info object 1`] = `
{
  "arguments": [
    "[files-or-urls..]",
  ],
  "commandName": "tldraw-cli",
  "commands": undefined,
  "description": "Open a tldraw \`.tldr\` file or tldraw.com URL your default browser. Uses a locally-hosted instance of tldraw. Call \`open\` without an argument to open a blank sketch. Sketches opened via URL are temporarily copied to the local system, and will not be kept in sync with tldraw.com. This process does not exit until the browser is closed.",
  "options": [
    {
      "aliases": [
        "-l",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Open the file or URL in a local instance of tldraw, instead of tldraw.com.",
      "flags": [
        "--local",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": undefined,
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": "false",
      "description": "Enable verbose logging. All verbose logs and prefixed with their log level and are printed to \`stderr\` for ease of redirection.",
      "flags": [
        "--verbose",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-h",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show help",
      "flags": [
        "--help",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
    {
      "aliases": [
        "-v",
      ],
      "arguments": undefined,
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "Show version number",
      "flags": [
        "--version",
      ],
      "parentCommandName": undefined,
      "required": undefined,
      "type": "boolean",
    },
  ],
  "positionals": [
    {
      "aliases": undefined,
      "arguments": [
        "files-or-urls",
      ],
      "choices": undefined,
      "commandName": undefined,
      "default": undefined,
      "defaultValue": undefined,
      "description": "The \`.tldr\` file(s) or tldraw.com sketch URL(s) to open. Omit the argument to open a blank sketch. Supports glob matching via your shell. Prints the URL of the local server to \`stdout\`.",
      "flags": undefined,
      "required": undefined,
      "type": "array",
    },
  ],
  "subcommandName": "open",
}
`;
