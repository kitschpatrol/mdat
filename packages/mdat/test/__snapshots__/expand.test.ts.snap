// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`comment expansion > should expand comments 1`] = `
"# The Mdat sample document

## Basic comment expansion

<!-- basic -->

**A bold statement from test-rules.js**

<!-- /basic -->

## Basic comment clean up

<!-- basic -->

**A bold statement from test-rules.js**

<!-- /basic -->

## Prefixed comment

Expansion only happens when \`--prefix mm\` option is set:

<!-- mm-basic -->

## Comment expansion with dynamic content

Shows the name of the rules file:

<!-- basic-dynamic -->

I was generated from test-rules.js

<!-- /basic-dynamic -->

## Required expansion

Inclusion is validated via \`--check\` option

<!-- basic-list-required -->

* I
* am
* a
* list
* that
* must
* be
* here

<!-- /basic-list-required -->

## Expansions with options argument, canonical syntax

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->

ðŸª´ I am between two ferns ðŸª´

<!-- /basic-options -->

## Same expansion with different options

<!-- basic-options {prefix: "ðŸŒ³ ", suffix: " ðŸŒ³"} -->

ðŸŒ³ I am between two ferns ðŸŒ³

<!-- /basic-options -->

## Expansions with arguments, syntax forgiveness

<!--- # basic-options({prefix: "ðŸª´ ", suffix: " ðŸª´"}) -->

ðŸª´ I am between two ferns ðŸª´

<!-- /basic-options -->

## Expansions via dot paths given arbitrary json files as rules

Given e.g. \`--rules ./package.json\`, allow access to fields in the file:

<!--- name -->

<!--- author.name -->

## Handling empty rule content

This expansion rule always returns an empty string. The comment will not be expanded, Mdat will report the error.

<!-- basic-empty -->

## Handling non-required rule errors

This expansion rule always throws an error. The comment will not be expanded, and Mdat will report the error.

<!-- basic-throws -->

## Ordered expansion

Order in the document is validated via \`--check\` option

<!-- basic-ordered -->

I had to be last

<!-- /basic-ordered -->

## Inline expansions with paragraph elements

This is a sentence with a "*<!-- basic-inline -->test-rules.js<!-- /basic-inline -->*" inside of it.

## Multiple paragraphs

<!-- basic-multiple-paragraphs -->

I am a paragraph 1

I am a paragraph 2

I am a paragraph 3

<!-- /basic-multiple-paragraphs -->

## Multiple paragraphs blockquote

> <!-- basic-multiple-paragraphs -->
>
> I am a paragraph 1
>
> I am a paragraph 2
>
> I am a paragraph 3
>
> <!-- /basic-multiple-paragraphs -->

## Tags in code fence

Should not expand

\`\`\`html
<!-- basic -->
\`\`\`

## Stacked expansions

<!-- basic -->

**A bold statement from test-rules.js**

<!-- /basic -->

<!-- basic -->

**A bold statement from test-rules.js**

<!-- /basic -->

The following required an extra step to split html statements that were being interpreted as contiguous

## Adjacent inline expansions

A<!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->Z

## Adjacent top-level expansions

<!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->Z

## Adjacent top-level expansions

<!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><b>Absolutely</b><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->

## Adjacent top-level expansions with options

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->ðŸª´ I am between two ferns ðŸª´<!-- /basic-options --><!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->ðŸª´ I am between two ferns ðŸª´<!-- /basic-options -->

## Adjacent top-level expansions

<!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->

## Adjacent top-level expansions with leading space

 <!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->

## Expansion with leading space

 <!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->
"
`;

exports[`comment expansion > should expand prefixed comments only 1`] = `
"# The Mdat sample document

## Basic comment expansion

<!-- basic -->

## Basic comment clean up

<!-- basic -->

Stale content that will be replaced

<!-- /basic -->

## Prefixed comment

Expansion only happens when \`--prefix mm\` option is set:

<!-- mm-basic -->

**A bold statement from test-rules.js**

<!-- /mm-basic -->

## Comment expansion with dynamic content

Shows the name of the rules file:

<!-- basic-dynamic -->

## Required expansion

Inclusion is validated via \`--check\` option

<!-- basic-list-required -->

## Expansions with options argument, canonical syntax

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->

## Same expansion with different options

<!-- basic-options {prefix: "ðŸŒ³ ", suffix: " ðŸŒ³"} -->

## Expansions with arguments, syntax forgiveness

<!--- # basic-options({prefix: "ðŸª´ ", suffix: " ðŸª´"}) -->

## Expansions via dot paths given arbitrary json files as rules

Given e.g. \`--rules ./package.json\`, allow access to fields in the file:

<!--- name -->

<!--- author.name -->

## Handling empty rule content

This expansion rule always returns an empty string. The comment will not be expanded, Mdat will report the error.

<!-- basic-empty -->

## Handling non-required rule errors

This expansion rule always throws an error. The comment will not be expanded, and Mdat will report the error.

<!-- basic-throws -->

## Ordered expansion

Order in the document is validated via \`--check\` option

<!-- basic-ordered -->

## Inline expansions with paragraph elements

This is a sentence with a "*<!-- basic-inline -->*" inside of it.

## Multiple paragraphs

<!-- basic-multiple-paragraphs -->

## Multiple paragraphs blockquote

> <!-- basic-multiple-paragraphs -->

## Tags in code fence

Should not expand

\`\`\`html
<!-- basic -->
\`\`\`

## Stacked expansions

<!-- basic -->

<!-- basic -->

The following required an extra step to split html statements that were being interpreted as contiguous

## Adjacent inline expansions

A<!-- basic --><!-- basic -->Z

## Adjacent top-level expansions

<!-- basic --><!-- basic -->Z

## Adjacent top-level expansions

<!-- basic --><b>Absolutely</b><!-- basic -->

## Adjacent top-level expansions with options

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} --><!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->

## Adjacent top-level expansions

<!-- basic --><!-- basic -->

## Adjacent top-level expansions with leading space

 <!-- basic --><!-- basic -->

## Expansion with leading space

 <!-- basic -->
"
`;

exports[`comment expansion > should include the meta tag if asked 1`] = `
"<!-- Warning: Content in HTML comment blocks generated by mdat on 2024-01-28. -->

# The Mdat sample document

## Basic comment expansion

<!-- basic -->

**A bold statement from test-rules.js**

<!-- /basic -->

## Basic comment clean up

<!-- basic -->

**A bold statement from test-rules.js**

<!-- /basic -->

## Prefixed comment

Expansion only happens when \`--prefix mm\` option is set:

<!-- mm-basic -->

## Comment expansion with dynamic content

Shows the name of the rules file:

<!-- basic-dynamic -->

I was generated from test-rules.js

<!-- /basic-dynamic -->

## Required expansion

Inclusion is validated via \`--check\` option

<!-- basic-list-required -->

* I
* am
* a
* list
* that
* must
* be
* here

<!-- /basic-list-required -->

## Expansions with options argument, canonical syntax

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->

ðŸª´ I am between two ferns ðŸª´

<!-- /basic-options -->

## Same expansion with different options

<!-- basic-options {prefix: "ðŸŒ³ ", suffix: " ðŸŒ³"} -->

ðŸŒ³ I am between two ferns ðŸŒ³

<!-- /basic-options -->

## Expansions with arguments, syntax forgiveness

<!--- # basic-options({prefix: "ðŸª´ ", suffix: " ðŸª´"}) -->

ðŸª´ I am between two ferns ðŸª´

<!-- /basic-options -->

## Expansions via dot paths given arbitrary json files as rules

Given e.g. \`--rules ./package.json\`, allow access to fields in the file:

<!--- name -->

<!--- author.name -->

## Handling empty rule content

This expansion rule always returns an empty string. The comment will not be expanded, Mdat will report the error.

<!-- basic-empty -->

## Handling non-required rule errors

This expansion rule always throws an error. The comment will not be expanded, and Mdat will report the error.

<!-- basic-throws -->

## Ordered expansion

Order in the document is validated via \`--check\` option

<!-- basic-ordered -->

I had to be last

<!-- /basic-ordered -->

## Inline expansions with paragraph elements

This is a sentence with a "*<!-- basic-inline -->test-rules.js<!-- /basic-inline -->*" inside of it.

## Multiple paragraphs

<!-- basic-multiple-paragraphs -->

I am a paragraph 1

I am a paragraph 2

I am a paragraph 3

<!-- /basic-multiple-paragraphs -->

## Multiple paragraphs blockquote

> <!-- basic-multiple-paragraphs -->
>
> I am a paragraph 1
>
> I am a paragraph 2
>
> I am a paragraph 3
>
> <!-- /basic-multiple-paragraphs -->

## Tags in code fence

Should not expand

\`\`\`html
<!-- basic -->
\`\`\`

## Stacked expansions

<!-- basic -->

**A bold statement from test-rules.js**

<!-- /basic -->

<!-- basic -->

**A bold statement from test-rules.js**

<!-- /basic -->

The following required an extra step to split html statements that were being interpreted as contiguous

## Adjacent inline expansions

A<!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->Z

## Adjacent top-level expansions

<!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->Z

## Adjacent top-level expansions

<!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><b>Absolutely</b><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->

## Adjacent top-level expansions with options

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->ðŸª´ I am between two ferns ðŸª´<!-- /basic-options --><!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->ðŸª´ I am between two ferns ðŸª´<!-- /basic-options -->

## Adjacent top-level expansions

<!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->

## Adjacent top-level expansions with leading space

 <!-- basic -->**A bold statement from test-rules.js**<!-- /basic --><!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->

## Expansion with leading space

 <!-- basic -->**A bold statement from test-rules.js**<!-- /basic -->
"
`;

exports[`comment expansion > should work with arbitrary json files 1`] = `
"<!-- Warning: Content in HTML comment blocks generated by mdat on 2024-01-28. -->

# The Mdat sample document

## Basic comment expansion

<!-- basic -->

## Basic comment clean up

<!-- basic -->

Stale content that will be replaced

<!-- /basic -->

## Prefixed comment

Expansion only happens when \`--prefix mm\` option is set:

<!-- mm-basic -->

## Comment expansion with dynamic content

Shows the name of the rules file:

<!-- basic-dynamic -->

## Required expansion

Inclusion is validated via \`--check\` option

<!-- basic-list-required -->

## Expansions with options argument, canonical syntax

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->

## Same expansion with different options

<!-- basic-options {prefix: "ðŸŒ³ ", suffix: " ðŸŒ³"} -->

## Expansions with arguments, syntax forgiveness

<!--- # basic-options({prefix: "ðŸª´ ", suffix: " ðŸª´"}) -->

## Expansions via dot paths given arbitrary json files as rules

Given e.g. \`--rules ./package.json\`, allow access to fields in the file:

<!--- name -->

mdat

<!-- /name -->

<!--- author.name -->

Eric Mika

<!-- /author.name -->

## Handling empty rule content

This expansion rule always returns an empty string. The comment will not be expanded, Mdat will report the error.

<!-- basic-empty -->

## Handling non-required rule errors

This expansion rule always throws an error. The comment will not be expanded, and Mdat will report the error.

<!-- basic-throws -->

## Ordered expansion

Order in the document is validated via \`--check\` option

<!-- basic-ordered -->

## Inline expansions with paragraph elements

This is a sentence with a "*<!-- basic-inline -->*" inside of it.

## Multiple paragraphs

<!-- basic-multiple-paragraphs -->

## Multiple paragraphs blockquote

> <!-- basic-multiple-paragraphs -->

## Tags in code fence

Should not expand

\`\`\`html
<!-- basic -->
\`\`\`

## Stacked expansions

<!-- basic -->

<!-- basic -->

The following required an extra step to split html statements that were being interpreted as contiguous

## Adjacent inline expansions

A<!-- basic --><!-- basic -->Z

## Adjacent top-level expansions

<!-- basic --><!-- basic -->Z

## Adjacent top-level expansions

<!-- basic --><b>Absolutely</b><!-- basic -->

## Adjacent top-level expansions with options

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} --><!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->

## Adjacent top-level expansions

<!-- basic --><!-- basic -->

## Adjacent top-level expansions with leading space

 <!-- basic --><!-- basic -->

## Expansion with leading space

 <!-- basic -->
"
`;

exports[`comment expansion > should work with hand-crafted json rules 1`] = `
"<!-- Warning: Content in HTML comment blocks generated by mdat on 2024-01-28. -->

# The Mdat sample document

## Basic comment expansion

<!-- basic -->

**A bold statement from test-rules-json.json**

<!-- /basic -->

## Basic comment clean up

<!-- basic -->

**A bold statement from test-rules-json.json**

<!-- /basic -->

## Prefixed comment

Expansion only happens when \`--prefix mm\` option is set:

<!-- mm-basic -->

## Comment expansion with dynamic content

Shows the name of the rules file:

<!-- basic-dynamic -->

## Required expansion

Inclusion is validated via \`--check\` option

<!-- basic-list-required -->

* I
* am
* a
* list
* that
* must
* be
* here

<!-- /basic-list-required -->

## Expansions with options argument, canonical syntax

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->

## Same expansion with different options

<!-- basic-options {prefix: "ðŸŒ³ ", suffix: " ðŸŒ³"} -->

## Expansions with arguments, syntax forgiveness

<!--- # basic-options({prefix: "ðŸª´ ", suffix: " ðŸª´"}) -->

## Expansions via dot paths given arbitrary json files as rules

Given e.g. \`--rules ./package.json\`, allow access to fields in the file:

<!--- name -->

<!--- author.name -->

## Handling empty rule content

This expansion rule always returns an empty string. The comment will not be expanded, Mdat will report the error.

<!-- basic-empty -->

## Handling non-required rule errors

This expansion rule always throws an error. The comment will not be expanded, and Mdat will report the error.

<!-- basic-throws -->

## Ordered expansion

Order in the document is validated via \`--check\` option

<!-- basic-ordered -->

## Inline expansions with paragraph elements

This is a sentence with a "*<!-- basic-inline -->*" inside of it.

## Multiple paragraphs

<!-- basic-multiple-paragraphs -->

## Multiple paragraphs blockquote

> <!-- basic-multiple-paragraphs -->

## Tags in code fence

Should not expand

\`\`\`html
<!-- basic -->
\`\`\`

## Stacked expansions

<!-- basic -->

**A bold statement from test-rules-json.json**

<!-- /basic -->

<!-- basic -->

**A bold statement from test-rules-json.json**

<!-- /basic -->

The following required an extra step to split html statements that were being interpreted as contiguous

## Adjacent inline expansions

A<!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic --><!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic -->Z

## Adjacent top-level expansions

<!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic --><!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic -->Z

## Adjacent top-level expansions

<!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic --><b>Absolutely</b><!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic -->

## Adjacent top-level expansions with options

<!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} --><!-- basic-options {prefix: "ðŸª´ ", suffix: " ðŸª´"} -->

## Adjacent top-level expansions

<!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic --><!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic -->

## Adjacent top-level expansions with leading space

 <!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic --><!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic -->

## Expansion with leading space

 <!-- basic -->**A bold statement from test-rules-json.json**<!-- /basic -->
"
`;
